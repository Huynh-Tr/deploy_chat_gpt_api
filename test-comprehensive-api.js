const https = require('https');

// Test the comprehensive API with various user messages
const testComprehensiveAPI = async () => {
  console.log('üß™ Testing Comprehensive API with Various User Messages');
  console.log('=' .repeat(60));

  const testCases = [
    {
      name: "Vietnamese Date Question",
      message: "h√¥m nay l√† th·ª© m·∫•y",
      expected: "H√¥m nay l√†"
    },
    {
      name: "Days in Month Question",
      message: "th√°ng n√†y c√≥ bao nhi√™u ng√†y",
      expected: "Th√°ng 10 c√≥ 31 ng√†y"
    },
    {
      name: "Time Question",
      message: "m·∫•y gi·ªù r·ªìi",
      expected: "B√¢y gi·ªù l√†"
    },
    {
      name: "Greeting",
      message: "xin ch√†o",
      expected: "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"
    },
    {
      name: "Help Request",
      message: "b·∫°n c√≥ th·ªÉ gi√∫p t√¥i kh√¥ng",
      expected: "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n"
    },
    {
      name: "Weather Question",
      message: "th·ªùi ti·∫øt h√¥m nay th·∫ø n√†o",
      expected: "T√¥i kh√¥ng th·ªÉ cung c·∫•p th√¥ng tin th·ªùi ti·∫øt"
    },
    {
      name: "Math Question",
      message: "b·∫°n c√≥ th·ªÉ t√≠nh to√°n kh√¥ng",
      expected: "T√¥i c√≥ th·ªÉ gi√∫p v·ªõi c√°c ph√©p t√≠nh"
    },
    {
      name: "General Message",
      message: "t√¥i mu·ªën bi·∫øt th√¥ng tin v·ªÅ AI",
      expected: "T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa b·∫°n"
    }
  ];

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`\n${i + 1}Ô∏è‚É£ Testing: ${testCase.name}`);
    console.log(`üí¨ Message: "${testCase.message}"`);
    console.log(`üìù Expected: Contains "${testCase.expected}"`);
    console.log('‚è≥ Sending request...');

    try {
      const response = await fetch('https://chat-gpt-api.pages.dev/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: testCase.message,
          model: 'gpt-5-nano'
        })
      });

      console.log(`üìä Status: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      console.log(`‚úÖ Response: ${data.message}`);
      
      if (data.message.includes(testCase.expected)) {
        console.log(`üéâ SUCCESS: Response contains expected content`);
      } else {
        console.log(`‚ö†Ô∏è  PARTIAL: Response may not match exactly`);
        console.log(`   Got: "${data.message}"`);
        console.log(`   Expected to contain: "${testCase.expected}"`);
      }

      // Simulate puter.print() output
      console.log(`üñ®Ô∏è  puter.print() output:`);
      console.log('‚îÄ'.repeat(50));
      console.log(data.message);
      console.log('‚îÄ'.repeat(50));

    } catch (error) {
      console.error(`‚ùå Error testing ${testCase.name}:`);
      console.error(`Error: ${error.message}`);
    }

    // Add delay between requests
    if (i < testCases.length - 1) {
      console.log('‚è≥ Waiting 2 seconds before next test...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  console.log('\nüèÅ All comprehensive tests completed!');
};

// Test specific Vietnamese questions
const testVietnameseQuestions = async () => {
  console.log('\n\nüáªüá≥ Testing Specific Vietnamese Questions');
  console.log('=' .repeat(50));

  const vietnameseQuestions = [
    "h√¥m nay l√† th·ª© m·∫•y",
    "th√°ng n√†y c√≥ bao nhi√™u ng√†y", 
    "m·∫•y gi·ªù r·ªìi",
    "xin ch√†o b·∫°n",
    "b·∫°n c√≥ th·ªÉ gi√∫p t√¥i kh√¥ng"
  ];

  for (let i = 0; i < vietnameseQuestions.length; i++) {
    const question = vietnameseQuestions[i];
    console.log(`\n${i + 1}Ô∏è‚É£ Vietnamese Question: "${question}"`);

    try {
      const response = await fetch('https://chat-gpt-api.pages.dev/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: question,
          model: 'gpt-5-nano'
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      console.log(`üìä Status: ${response.status} ${response.statusText}`);
      console.log(`‚úÖ Response: ${data.message}`);
      console.log(`üïí Timestamp: ${data.timestamp}`);

    } catch (error) {
      console.error(`‚ùå Error: ${error.message}`);
    }

    // Add delay between requests
    if (i < vietnameseQuestions.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
};

// Run all tests
const runAllTests = async () => {
  console.log('üöÄ Comprehensive API Test Suite');
  console.log('=' .repeat(60));
  
  await testComprehensiveAPI();
  await testVietnameseQuestions();
  
  console.log('\nüéâ All tests completed successfully!');
};

runAllTests();
